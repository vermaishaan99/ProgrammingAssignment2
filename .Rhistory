## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if (!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
B <- matrix(c(1,2,3,4),2,2)
b
B
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  #null initialization
set <- function(y) {  #method to set the matrix
x <<- y
inv <<- NULL
}
get <- function() x  #get matrix x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv # return inverse
list(set = set,  #return method list
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if (!is.null(inv)) { #return matrix if its not null
message("getting cached data")
return(inv)
}
data <- x$get()  #get matrix
inv <- solve(data) %*% data # solve inverse using matrix multiplication
x$setinverse(inv) #set inverse
inv
}
B <- matrix(c(1,2,3,4),2,2)
B
B1 <- makeCacheMatrix(B)
B1
cacheSolve(B1)
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  #null initialization
set <- function(y) {  #method to set the matrix
x <<- y
inv <<- NULL
}
get <- function() x  #get matrix x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv # return inverse
list(set = set,  #return method list
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if (!is.null(inv)) { #return matrix if its not null
message("getting cached data")
return(inv)
}
data <- x$get()  #get matrix
inv <- solve(data,...) # solve inverse using matrix multiplication
x$setinverse(inv) #set inverse
inv
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
f <- makeCacheMatrix(matrix(1:8,2,4))
f$get()
f$getinverse()
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:8,4,4))
f$get()
f$getinverse()
cacheSolve(f)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  #null initialization
set <- function(y) {  #method to set the matrix
x <<- y
inv <<- NULL
}
get <- function() x  #get matrix x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv # return inverse
list(set = set,  #return method list
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if (!is.null(inv)) { #return matrix if its not null
message("getting cached data")
return(inv)
}
data <- x$get()  #get matrix
inv <- solve(data, ...) # solve inverse
x$setinverse(inv) #set inverse
inv
}
f <- makeCacheMatrix(matrix(1:8,2,2))
f$get()
f$getinverse()
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:8,4,4))
cacheSolve(f)
f <- makeCacheMatrix(matrix(1:8,4,4))
f$get()
f$getinverse()
cacheSolve(f)
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B1)
B <- matrix(1:16,4,4)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
B <- matrix(1:9,3,3)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
